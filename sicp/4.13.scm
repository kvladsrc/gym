(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
	((unbound? exp) (eval-unbount exp env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
	(else
	 (error "Неизвестный тип выражения -- EVAL" exp))))


(define (unbound? exp)
  (tagged-list? exp `make-unbount!))
(define (unbound-var exp) (cadr exp))
(define (eval-unbount exp env)
  (let iter ((frame (first-frame env)))
    (cond ((eq? (get-var (cdr frame)) (unbound-var exp))
	   (set-cdr! frame (cddr frame)))
	  ((null? frame) "Not found")
	  (else (iter (cdr frame))))))
