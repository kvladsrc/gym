(define (deriv exp var)
   (cond ((number? exp) 0)
         ((variable? exp) (if (same-variable? exp var) 1 0))
         (else ((get `deriv (operator exp)) (operands exp)
                                            var))))
(define (operator exp) (car exp))

(define (operands exp) (cdr exp))

(define (install-add-package)
  (define (addend set) (car set))
  (define (augend set) (cadr set))
  (define (dx operands var)
    (make-sum (deriv (addend operands) var)
	      (deriv (augend operands) var))
  (put `deriv `+ dx))

(define (install-mul-package)
  (define (multiplier set) (car set))
  (define (multiplicand set) (cadr set))
  (define (dx operands var)
    (make-sum (make-product (multiplicand operands)
			    (deriv (multiplier operands)
				   var))
	      (make-product (multiplier operands)
			    (deriv (multiplicand operands)
				   var))))
  (put `deriv `* dx))

(define (install-exp-package)
  (define (exponent exp) (cadr exp))
  (define (base exp) (car exp))
  (define (make-exponentiation base expt)
    (cond ((=number? expt 0) 1)
	  ((=number? expt 1) base)
	  ((and (number? base)
		(number? expt))
	   (power base expt))
	  (else (list '** base expt))))
  (define (dx exp var)
    (make-product
     (make-product
      (exponent exp)
      (make-exponention (base exp)
			(- (exponent exp) 1)))
     (deriv (base exp) var)))
  (put `deriv `** dx))
