(define (mul-interval a b)
  (let ((a1 (lower-bound a))
	(a2 (upper-bound a))
	(b1 (lower-bound b))
	(b2 (upper-bound b)))
    (cond ((and (> a1 0) (> b1 0))
	   (make-interval (* a1 b1)
			  (* a2 b2)))
	  ((and (< a1 0) (> b1 0) (> a2 0))
	   (make-interval (* a1 b2)
			  (* a2 b2)))
	  ((and (< a2 0) (> b1 0))
	   (make-interval (* a1 b2)
			  (* a2 b1)))
	  ((and (< a2 0) (< b1 0) (> b2 0))
	   (make-interval (* a1 b2)
			  (* a1 b1)))
	  ((and (< a2 0) (< b2 0))
	   (make-interval (* a2 b2)
			  (* a1 b1)))
	  ((and (< b2 0) (< a1 0) (> a2 0))
	   (make-interval (* a2 b1)
			  (* a1 b1)))
	  ((and (< b2 0) (> a1 0))
	   (make-interval (* b1 a2)
			  (* b2 b1)))
	  ((and (> a1 0) (< b1 0) (> b2 0))
	   (make-interval (* b1 a2)
			  (* b2 a2)))
	  ((and (< a1 0) (< b1 0) (> a2 0) (> a2 0))
	   (make-interval (min (* a1 b2) (* b1 a2))
			  (max (* a2 b2) (* a1 b1)))))))
