;Deque

(define (make-node item pre post)
  (let ((value item)
	(pre-item pre)
	(post-item post))
    (define (get-val) value)
    (define (pre-node) pre-item)
    (define (post-node) post-item)
    (define (set-val! new-val)
      (set! value new-val))
    (define (set-pre! new-pre)
      (set! pre-item new-pre))
    (define (set-post! new-post)
      (set! post-item new-post))
    (define (dispatch m)
      (cond ((eq? m `val)
	     (get-val))
	    ((eq? m `pre-node)
	     (pre-node))
	    ((eq? m `post-node)
	     (post-node))
	    ((eq? m `set-val!)
	     set-val!)
	    ((eq? m `set-pre!)
	     set-pre!)
	    ((eq? m `set-post!)
	     set-post!)
	    (else "Error")))
    dispatch))

(define (item node) (node `val))
(define (next node) (node `post-node))
(define (prev node) (node `pre-node))
(define (set-item! node item) ((node `set-val!) item))
(define (set-pre! node new-pre) ((node `set-pre!) new-pre))
(define (set-post! node new-post) ((node `set-post!) new-post))

(define (make-deque)
  (let ((front-node `())
	(rear-node `()))
    (define (front-deque)
      (if (empty-deque?)
	  "Empty"
	  (item front-node)))
    (define (rear-deque)
      (if (empty-deque?)
	  "Empty"
	  (item rear-node)))
    (define (set-front-deque! item)
      (if (empty-deque?)
	  (let ((new-node (make-node item `() `())))
	    (begin (set! front-node new-node)
		   (set! rear-node new-node)))
	  (let ((new-node (make-node item `() front-node)))
	    (begin (set! front-node new-node)
		   (set-pre! (next front-node)
			     front-node)))))
    (define (set-rear-deque! item)
      (if (empty-deque?)
	  (let ((new-node (make-node item `() `())))
	    (begin (set! front-node new-node)
		   (set! rear-node new-node)))
	  (let ((new-node (make-node item rear-node `())))
	    (begin (set! rear-node new-node)
		   (set-post! (prev rear-node)
			      rear-node)))))
    (define (front-delete-deque!)
      (if (empty-deque?)
	  "Error"
	  (begin (set! front-node (next front-node))
		 (if (empty-deque?)
		     "OK"
		     (set-pre! front-node `()))
		 "OK")))
    (define (rear-delete-deque!)
      (if (empty-deque?)
	  "Error"
	  (begin (set! rear-node (prev rear-node))
		 (if (empty-deque?)
		     "OK"
		     (set-post! rear-node `()))
		 "OK")))
    (define (empty-deque?)
      (null? front-node))
    (define (dispatch m)
      (cond ((eq? m `front-deque) (front-deque))
	    ((eq? m `rear-deque) (rear-deque))
	    ((eq? m `front-insert-deque!) set-front-deque!)
	    ((eq? m `rear-insert-deque!) set-front-deque!)
	    ((eq? m `front-delete-deque!)
	     (front-delete-deque!))
	    ((eq? m `rear-delete-deque!)
	     (rear-delete-deque!))
	    ((eq? m `empty-deque?) (empty-deque?))
	    (else "Error")))
    dispatch))

(define (front-deque deque) (deque `front-deque))
(define (rear-deque deque) (deque `rear-deque))
(define (front-delete-deque! deque)
  (deque `front-delete-deque!))
(define (rear-delete-deque! deque)
  (deque `rear-delete-deque!))
(define (front-insert-deque! deque item)
  ((deque `front-insert-deque!) item))
(define (rear-insert-deque! deque item)
  ((deque `rear-insert-deque!) item))
(define (empty-deque? deque) (deque `empty-deque?))
