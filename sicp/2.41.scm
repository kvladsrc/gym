(define (per x)
  (if (< x 0)
      (list)
      (cons x (per (- x 1)))))

(define (func x)
  (define (sum-pairs x)
    (define (helper a b)
      (if (= a 0)
	  (list)
	  (cons (list a b)
		(helper (- a 1)
			(+ b 1)))))
    (helper x 0))
  (define (a b)
    (if (null? b)
	(list)
	(append (map (lambda (x)
		       (cons (car b)
			     x))
		     (sum-pairs (- x (car b))))
		(a (cdr b)))))
  (a (per x)))
