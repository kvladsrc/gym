(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
	((let? exp) (eval (let->combination exp) env))
	((let*? exp) (exp (let*->nested-lets exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
	(else
	 (error "Неизвестный тип выражения -- EVAL" exp))))

;Let
(define (let? exp) (tagged-list? exp `let))
(define (let-body exp) (caddr exp))
(define (let-variables exp)
  (map car (cadr exp)))
(define (let-exps exp)
  (map cdr (cadr exp)))
(define (let->combination exp)
  (cons (make-lambda (let-variables exp)
		     (let-body exp))
	(let-exps exp)))

;let*
(define (let*? exp) (tagged-list? exp `let*))
(define (let-assigment exp) (cadr exp))
(define (make-let assignment body)
  (list `let assignment body))
(define (let*->nested-lets exp)
  (let ((first-variable (car (let-variables exp)))
	(first-exp (car (let-exps exp)))
	(rest (cdr (cadr exp))))
    (if (null? rest)
	(make-let (list (cons first-variable
			      first-exp))
		  (let-body exp))
	(make-let (list (cons first-variable
			      first-exp))
		  (let*->nested-lets (next-let*-level
				      exp))))))
(define (next-let*-level exp)
  (list `let* (cdr (let-assigment exp)) (let-body exp)))
